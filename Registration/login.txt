<!DOCTYPE html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1">
<style>
body {font-family: Comic Sans Ms, Helvetica, sans-serif;}

input[type=text], input[type=password] 
{
width: 100%;
padding: 12px 20px;
margin: 8px 0;
display: inline-block;
border: 1px solid #ccc;
box-sizing: border-box;
}

button 
{
background-color: #4CAF50;
color: white;
padding: 14px 20px;
margin: 8px 0;
border: none;
cursor: pointer;
width: auto;
border-radius:8px;
}

button:hover 
{
opacity: 0.8;
}

.cancelbtn 
{
width: auto;
padding: 10px 18px;
background-color: #f44336;
}

.imgcontainer 
{
text-align: center;
margin: 24px 0 12px 0;
position: relative;
}

.splash
{
position:fixed;
top:0;
left:0;
width:100%;
height:100%;
background:black;
z-index:200;
color:white;
text-align:center;
line-height:90vh;
}

.splash.display-none
{
position:fixed;
top:0;
left:0;
opacity:0;
width:100%;
height:100%;
background:black;
z-index:-10;
color:white;
text-align:center;
line-height:90vh;
}

@keyframes fadeIn{
to{
opacity:1;
}
}

.fade-in{
opacity:0;
animation:fadeIn 1s ease-in forwards;
}

img.avatar
{
width: 40%;
border-radius: 50%;
}

img.icon
{
	width:50%;
}

.img
{
margin-top:60px;
}

.container 
{
  padding: 16px;
}

span.psw 
{
float: right;
padding-top: 16px;
}

.modal 
{
display: none; 
position: fixed; 
z-index: 1; 
left: 0;
top: 0;
width: 100%; 
height: 100%; 
overflow: auto; 
background-color: rgb(0,0,0); 
background-color: rgba(0,0,0,0.4); 
padding-top: 60px;
}

.modal-content 
{
  background-color: #fefefe;
  margin: 5% auto 15% auto; 
  border: 1px solid #888;
  width: 80%; 
}

.close 
{
position: absolute;
right: 25px;
top: 0;
color: #000;
font-size: 35px;
font-weight: bold;
}


.close:hover,
.close:focus 
{
color: red;
cursor: pointer;
}

.animate 
{
-webkit-animation: animatezoom 0.6s;
animation: animatezoom 0.6s
}

@-webkit-keyframes animatezoom 
{
from {-webkit-transform: scale(0)} 
to {-webkit-transform: scale(1)}
}
  
@keyframes animatezoom 
{
from {transform: scale(0)} 
to {transform: scale(1)}
}

@media screen and (max-width: 300px) 
{
  span.psw 
{
    display: block;
     float: none;
  }
  .cancelbtn 
{
     width: 100%;
  }
}
</style>
</head>
<body>

<div class="splash">
<h1 class="fade-in">Welcome!</h1>
</div>
<div class='img'>
<center><img src="icon.png" alt="icon" class="icon"></center>
</div>
<center><button class="button" onclick="document.getElementById('id01').style.display='block'" style="width:auto;">Login</button></center>
<div id="id01" class="modal">
  
  <form class="modal-content animate" action="/action_page.php" method="post">
    <div class="imgcontainer">
      <span onclick="document.getElementById('id01').style.display='none'" class="close" title="Close Modal">&times;</span>
      <img src="img_avatar2.png" alt="Avatar" class="avatar">
    </div>

    <div class="container">
      <label for="uname"><b>Username</b></label>
      <input type="text" placeholder="Enter Username" name="uname" required>

      <label for="psw"><b>Password</b></label>
      <input type="password" placeholder="Enter Password" name="psw" required>
        
      <button type="submit">Login</button>
      <label>
        <input type="checkbox" checked="checked" name="remember"> Remember me
      </label>
    </div>

    <div class="container" style="background-color:#f1f1f1">
      <button type="button" onclick="document.getElementById('id01').style.display='none'" class="cancelbtn">Cancel</button>
      <span class="psw">New User?<a href=".//signup.html"> Sign-in</a></span>
    </div>
  </form>
</div>

<script>
var fetch = require("node-fetch");
var ibmdb = require("ibm_db");

let CovidConfirmedCases = (CovidCases,city,state) => CovidCases[state]["districtData"][city]["confirmed"];
function comparePriority(a,b)
{
    if(a.priority <= b.priority) return -1;
    else return 1;
}

//Handling Asynchronous feature of API's using Promises
let ans;
ibmdb.open("DATABASE=BLUDB;HOSTNAME=dashdb-txn-sbox-yp-lon02-01.services.eu-gb.bluemix.net;UID=CZF74024;PWD=Manav9592830271@;PORT=50000;PROTOCOL=TCPIP", function (err,conn) {
    if (err) return console.log(err);
    
    conn.query("SELECT * FROM CZF74024.TRIP;", function (err, data) {
      if (err)
      {
          console.log("Error in connecting to database");
          return;
      }
      let db = data;
      conn.close(function () {
        console.log('DataBase Connection Closed');
      });

    let CovidUrl = 'https://api.covid19india.org/state_district_wise.json';
    fetch(CovidUrl)
    .then(res => res.json())
    .then((out) => {

        db = [
            {id: 1,Source: 12,Destination: 213,Date: null,Slot: null,priority: 3},
            {id: 2,Source: 12,Destination: 213,Date: null,Slot: null,priority: 3},
            {id: 3,Source: 12,Destination: 213,Date: null,Slot: null,priority: 2},
            {id: 4,Source: 12,Destination: 213,Date: null,Slot: null,priority: 1},
            {id: 5,Source: 12,Destination: 213,Date: null,Slot: null,priority: 1},
        ]
    
        //Sorting based on the priority in ascending Order
        db = db.sort(comparePriority);
    
        //Assuming all the queries are for single date
        let numVehEachSlot = 2;
        let Slots = ["Morning", "Evening"];
    
        let sol = [
            {perm: true,url: 'skfjbv', slot: ""}
        ]
        sol.length = db.length;
    
        let index = 0;
        for(let i in Slots){
            for(let l=0;l<numVehEachSlot;l++)
            {
                let user = db[index];
                let SourcAdd = user.Source.split(',');
                let DestAdd = user.Destination.split(',');
                //Number of Cases is avg of #cases in source and destination cities
                let numCases = (CovidConfirmedCases(out, SourcAdd.slice(-3), SourcAdd.slice(-2)) + CovidConfirmedCases(out, DestAdd.slice(-3), DestAdd.slice(-2)))/2;
                //Call API To HANDLE DIRECTIONS
                
                let permission;
                sol[index].perm = permission;
                sol[index].slot = Slot[i];
                sol[index].url = "";
                index++;
            }
        }

    })
    .catch(err => {throw err});

    });
  });


const splash=document.querySelector(".splash");
document.addEventListener("DOMContentLoaded",(e)=>{
setTimeout(()=>{
splash.classList.add('display-none')
},2000);
})

var modal = document.getElementById('id01');

window.onclick = function(event)
 {
    if (event.target == modal) 
{
        modal.style.display = "none";
    }
}
</script>

</body>
</html>
